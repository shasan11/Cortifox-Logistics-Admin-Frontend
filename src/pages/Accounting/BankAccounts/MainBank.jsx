import React, { useEffect } from "react";
import * as Yup from "yup";
import { Input, Modal, Button, Select, Form, Drawer,Tag } from "antd";
import { useFormik } from "formik";
import SingleTonCrud from "../../../components/SingletonCrud";
// Form Modal for Bank Accounts
const BankAccountFormModal = ({ visible, onCancel, onSubmit, formik, modalTitle }) => {
  return (
    <Drawer
      title={modalTitle}
      visible={visible}
      onClose={onCancel}
      width={600}
      onOk={formik.handleSubmit}
      footer={[
        <> 
        <Button key="back" onClick={onCancel}>
          Cancel
        </Button>{"  "}
        <Button key="submit" className="green-button" type="primary" onClick={formik.handleSubmit}>
          Save
        </Button>
        </>
      ]}
    >
      <Form layout="vertical">
        <Form.Item label={<>Bank Name{" "}<span className="text-danger">*</span></>}>
          <Input
            id="name"
            size="large"
            name="name"
            placeholder="Enter bank name"
            value={formik.values.name}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
          />
          {formik.touched.bank_name && formik.errors.name && (
            <div className="text-danger">{formik.errors.name}</div>
          )}
        </Form.Item>

        <Form.Item label={<>Display Name{" "}<span className="text-danger">*</span></>}>
          <Input
            id="display_name"
            size="large"
            name="display_name"
            placeholder="Enter display name"
            value={formik.values.display_name}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
          />
             
          
          {formik.touched.display_name && formik.errors.display_name && (
            <div className="text-danger">{formik.errors.display_name}</div>
          )}
        </Form.Item>

        <Form.Item label="Code (Autogenerated)">
          <Input
          disabled
          size="large"
            id="code"
            name="code"
            value={formik.values.code}
            readOnly
          />
        </Form.Item>

        <Form.Item label={<>Account Type{" "}<span className="text-danger">*</span></>}>
          <Select
            id="type"
            size="large"
            name="type"
            placeholder="Select account type"
            value={formik.values.type || "Savings"}
            onChange={(value) => formik.setFieldValue("type", value)}
            onBlur={formik.handleBlur}
          >
             
            <Select.Option value="savings">Savings</Select.Option>
            <Select.Option value="current">Current</Select.Option>
          </Select>
          {formik.touched.type && formik.errors.type && (
            <div className="text-danger">{formik.errors.type}</div>
          )}
        </Form.Item>

        <Form.Item label={<>Account Number{" "}<span className="text-danger">*</span></>}>
          <Input
            id="account_number"
            size="large"
            name="account_number"
            placeholder="Enter account number"
            value={formik.values.account_number}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
          />
          {formik.touched.account_number && formik.errors.account_number && (
            <div className="text-danger">{formik.errors.account_number}</div>
          )}
        </Form.Item>

        <Form.Item label="Opening Balance">
          <Input
            id="opening_balance"
            name="opening_balance"
            size="large"
            type="number"
            placeholder="Enter opening balance"
            value={formik.values.opening_balance}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
          />
          {formik.touched.opening_balance && formik.errors.opening_balance && (
            <div className="text-danger">{formik.errors.opening_balance}</div>
          )}
        </Form.Item>

        <Form.Item label="Description">
          <Input.TextArea
            id="description"
            name="description"
            size="large"
            placeholder="Enter description"
            value={formik.values.description}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
          />
        </Form.Item>
      </Form>
    </Drawer>
  );
};

// Validation schema
const BankAccountValidationSchema = Yup.object().shape({
  name: Yup.string().required("Bank name is required"),
  display_name: Yup.string().required("Display name is required"),
  code: Yup.string().required("Code is required"),
  type: Yup.string().required("Account type is required"),
  account_number: Yup.string().required("Account number is required"),
  opening_balance: Yup.number().required("Opening balance is required").positive("Opening balance must be a positive number"),
});

// Main component for managing bank accounts
const BankAccountMain = () => {
  const forTitle = "Bank Accounts";
  const endpoint = "/general-accounting/bankaccounts/";
  const modalTitle = "Bank Account Form";
  const initialFormValues = {
    name: "",
    display_name: "",
    code: "",
    type: "",
    acc_type:'Bank',
    account_number: "",
    opening_balance: "",
    description: "",
  };

  const tableColumns = [
    {
      headerName: "Bank Name",
      field: "name",
      sortable: true,
      filter: false,
      checkboxSelection: true,
      headerCheckboxSelection: true,
      flex: 2,
    },
     
    { headerName: "Code", field: "code", sortable: true, filter: false, flex: 1 },
    {
      headerName: "Type",
      field: "type",
      sortable: false,
      filter: true,
      flex: 1,
      valueGetter: (params) => {
        const type = params.data.type;
        return type ? type.charAt(0).toUpperCase() + type.slice(1) : '';
      },
      cellRenderer: (params) => {
        const type = params.data.type || '';
        const formattedType = type.charAt(0).toUpperCase() + type.slice(1);
        
        // Define colors for different types
        let color;
        let backgroundColor;
    
        if (type.toLowerCase() === 'savings') {
          color = '#FAAD14'; // Orange text color for "Savings"
          backgroundColor = '#FFF7E6'; // Light orange background
        } else if (type.toLowerCase() === 'current') {
          color = '#9254DE'; // Purple text color for "Current"
          backgroundColor = '#F9F0FF'; // Light purple background
        } else {
          color = '#595959'; // Default gray color
          backgroundColor = '#F0F0F0'; // Light gray background
        }
    
        return (
          <Tag
            style={{
              color,
              backgroundColor,
              padding: '4px 8px',
              fontWeight: 'bold',
              borderRadius: '4px',
              fontSize: '14px',
            }}
          >
            {formattedType}
          </Tag>
        );
      }
    },
    { headerName: "Account Number", field: "account_number", sortable: false, filter: false, flex: 2 },
    { headerName: "Balance", field: "opening_balance", sortable: true, filter: false, flex: 1 },
  ];

  // Function to generate a random code (autogenerated)
  const generateCode = () => {
    return `BANK${Math.floor(Math.random() * 10000)}`;
  };

  useEffect(() => {
    initialFormValues.code = generateCode();  // Autogenerate code
  }, []);

  return (
    <SingleTonCrud
      forTitle={forTitle}
      endpoint={endpoint}
      modalTitle={modalTitle}
      permission_level={3}
      no_header={true}
      filterurl="?acc_type=Bank&"
      columnDefs={tableColumns}
      formModal={BankAccountFormModal}
      validationSchema={BankAccountValidationSchema}
      initialFormValues={initialFormValues}
    />
  );
};

export default BankAccountMain;
