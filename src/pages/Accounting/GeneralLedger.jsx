 
import { Layout, Menu, Breadcrumb, Row, Col, Card, Divider, Typography,Modal,Form,Select,Button,Input} from "antd";
import BreadcrumbItem from "antd/es/breadcrumb/BreadcrumbItem";
import * as Yup from "yup"; 
import SingleTonCrud from "../../components/SingletonCrud";
import useFetchApiData from "../../helper/other/fetchData";
import {React, useState ,useEffect} from "react";
const { Header, Content, Footer } = Layout;
const { Title } = Typography;

const GeneralLedgerModal = ({
    visible,
    onCancel,
    onSubmit,
    formik,
    modalTitle,
    
  }) => {
    const coa=useFetchApiData('/general-accounting/chartofaccounts/?activr=True')
    // Function to generate an auto code (You can modify this to suit your logic)
    useEffect(() => {
      if (!formik.values.code) {
        const generatedCode = `COA-${Math.floor(1000 + Math.random() * 9000)}`;
        formik.setFieldValue("code", generatedCode);
      }
    }, [formik]);
  
    return (
      <Modal widthclassName="pager-modal" title={modalTitle} visible={visible} onClose={onCancel} onCancel={onCancel} onOk={formik.handleSubmit} destroyOnClose={true} footer={[ <Button key="back" onClick={onCancel}> Cancel </Button>, <Button key="submit" className="green-button" type="primary" onClick={formik.handleSubmit}> Submit </Button>, ]} >
        <Form layout="vertical">
          {/* Code (Autogenerated, not editable) */}
          <Form.Item label="Code">
            <Input size="large" id="code" name="code" value={formik.values.code} readOnly disabled />
            {formik.touched.code && formik.errors.code && (
              <Text type="danger">{formik.errors.code}</Text>
            )}
          </Form.Item>  
          {/* Name */}
          <Form.Item label="Name">
            <Input size="large" id="name" name="name" placeholder="Enter account name" value={formik.values.name} onChange={formik.handleChange} onBlur={formik.handleBlur} />
            {formik.touched.name && formik.errors.name && (
              <Text type="danger">{formik.errors.name}</Text>
            )}
          </Form.Item>  
          {/* Under */}
          <Form.Item label="Under">
            <Select size="large" id="under" name="under" placeholder="Select category" value={formik.values.under} onChange={(value) => formik.setFieldValue("under", value)} >
              {coa.map((item)=>(
                <Option value={item.id} key={item.id}>{item.name}</Option>
              ))}
            </Select>
            {formik.touched.under && formik.errors.under && (
              <Text type="danger">{formik.errors.under}</Text>
            )}
          </Form.Item>  
          {/* COA Type */}
          <Form.Item label="COA Type">
            <Select size="large" id="coa_type" name="coa_type" placeholder="Select COA type" value={formik.values.coa_type} onChange={(value) => formik.setFieldValue("coa_type", value)} >
              <Option value="Income" key="Income">Income</Option>
              <Option value="Expenses" key="Expenses">Expense</Option>
              <Option value="Equity" key="Equity">Equity</Option>
            </Select>
            {formik.touched.coa_type && formik.errors.coa_type && (
              <Text type="danger">{formik.errors.coa_type}</Text>
            )}
          </Form.Item>
  
          {/* Description */}
          <Form.Item label="Description">
            <Input.TextArea id="desc" size="large" name="desc" placeholder="Enter description" value={formik.values.desc} onChange={formik.handleChange} onBlur={formik.handleBlur} />
            {formik.touched.desc && formik.errors.desc && (
              <Text type="danger">{formik.errors.desc}</Text>
            )}
          </Form.Item>
        </Form>
      </Modal>
    );
  };

const GeneralLedger = () => {
  const coa=useFetchApiData('/general-accounting/chartofaccounts/')
  const forTitle = "Chart of Accounts";
  const endpoint = "/general-accounting/chartofaccounts/";
  const modalTitle = "Chart of Accounts Form";
  const initialFormValues = {
    code: "",
    name: "",
    under: "",
    coa_type: "",
    desc: "",
  };
  const getGroupName = (groupId) => {
    console.log("Contact Group",coa)
    const group = coa.find((group) => group.id === groupId);
    return group ? group.name : "";
  };


  const tableColumns = [
    
    { headerName: "Name", field: "name", sortable: true, filter: false, checkboxSelection: true, headerCheckboxSelection: true, flex: 2, },
    { headerName: "Code", field: "code", sortable: true, filter: false, flex: 1, },
    { headerName: "Under", field: "under", sortable: true, filter: true, flex: 1,valueGetter:(params)=>getGroupName(params.data.under)  },
    { headerName: "Type", field: "coa_type", sortable: true, filter: true, flex: 1, },
   ];

  const ChartOfAccountsValidationSchema = Yup.object().shape({
    code: Yup.string().required("Code is required"),
    name: Yup.string().required("Name is required"),
    under: Yup.string().nullable(),
    coa_type: Yup.string().required("Please select a COA type"),
    desc: Yup.string().nullable(),
  });
   
  
  return (
    <div className="layout">
      <div
        style={{
          background: "white",
          borderTop: "0.7px solid #d9d9d9",
          padding: "15px",
         
          alignItems: "center",
          height: "100%", // Ensure the div has a defined height
        }}
      >
        <Row justify="space-between">
        <Title level={4} style={{ margin: 0,fontWeight:"530" }}>
          General Ledger         
        </Title> 
        <Breadcrumb separator="/">
        <BreadcrumbItem>Home</BreadcrumbItem>
        <BreadcrumbItem>Accounting</BreadcrumbItem>
        <BreadcrumbItem>General Ledger</BreadcrumbItem>
        </Breadcrumb>   
        </Row>
             
      </div>
      <Layout style={{marginTop:"0px",  borderTop: "0.7px solid #d9d9d9",}}>
      <SingleTonCrud
      forTitle={forTitle}
      endpoint={endpoint}
      filterurl={""}
      no_header={true}
      permission_level={3}
      modalTitle={modalTitle}
      columnDefs={tableColumns}
      formModal={GeneralLedgerModal}
      validationSchema={ChartOfAccountsValidationSchema}
      initialFormValues={initialFormValues}     
    />

      </Layout>

       
    </div>
  );
};

export default GeneralLedger;
